You are a senior full-stack developer with expertise in web applications and database design. 
Create a complete demo merchant application based on the attached billing interface mockup.

**Project Specifications:**
- Technology Stack: HTML/CSS/JS frontend, Node.js Express backend, PostgreSQL database
- Deployment: GitHub Pages for frontend, local development server for full-stack testing
- Architecture: Single-page application with sidebar navigation and dynamic content loading

**Frontend Requirements:**
1. Responsive billing interface matching attached screenshot exactly
2. Application header: "Demo Merchant App" (left) + "Logged in as TestCustomer" (right)
3. Sidebar navigation with three sections:
   - "Manage Plan": Display billing interface replica as main content
   - "Manage Usage": Show embedded third-party content with demo notices
   - "Show Transactions": Dynamic transaction table with real data

**Dynamic Content System:**
1. Create modular SDK (thirdparty-sdk.js) for iframe injection
2. Implement AJAX-based content loading for transaction data
3. Dynamic iframe creation with iframe.contentDocument.write() for security isolation
4. Loading states, error handling, and responsive design throughout

**Backend API Requirements:**
1. Express.js server with static file serving and CORS configuration
2. RESTful endpoints:
   - GET /api/transactions (with filtering, pagination, sorting)
   - GET /api/transactions/:id (individual transaction details)
   - POST /api/transactions (create new transactions)
3. PostgreSQL integration with connection pooling
4. Input validation and sanitization middleware
5. Comprehensive error handling and structured logging

**Database Schema:**
Analyze the transaction display format and create a matching PostgreSQL schema:
- Transaction ID (unique identifier)
- Transaction Date (with proper indexing)
- Payment Method Type (Visa, Mastercard, PayPal, etc.)
- Payment Method Details (last 4 digits for cards)
- Amount (decimal precision for currency)
- Status (Completed, Pending, Failed with constraints)
- Audit timestamps (created_at, updated_at)
- Proper indexing for performance queries

**Sample Data Generation:**
Insert 15-20 realistic transaction records spanning different:
- Payment methods (credit cards, PayPal, bank transfers)
- Amount ranges ($10 to $5,000)
- Status types across recent dates
- Formatted for immediate frontend consumption

**Security Implementation:**
1. SQL injection prevention using prepared statements
2. Input validation with comprehensive sanitization
3. CORS configuration for production deployment
4. Environment variable management for database credentials
5. CSP headers and iframe sandboxing for content security

**Development Workflow:**
1. Local development server with hot reload (nodemon)
2. GitHub Actions workflow for automated deployment
3. Database migration scripts for version control
4. Environment configuration (.env) for different deployment stages
5. Comprehensive README with setup and deployment instructions

**Implementation Priority:**
1. Create static frontend matching mockup design
2. Implement sidebar navigation and basic routing
3. Build dynamic SDK for content injection
4. Create Node.js server with static file serving
5. Design and create PostgreSQL database schema
6. Implement API endpoints with database integration
7. Connect frontend to backend with dynamic data loading
8. Add filtering, pagination, and search functionality
9. Implement comprehensive error handling and loading states
10. Setup automated testing and deployment pipeline

**Quality Standards:**
- Semantic HTML with proper accessibility attributes
- Mobile-first responsive design with CSS Grid/Flexbox
- Modern JavaScript with ES6+ features and proper error boundaries
- RESTful API design with consistent response formats
- Database queries optimized for performance
- Production-ready security practices throughout

**Deliverables:**
- Complete project structure with organized file hierarchy
- Frontend application with dynamic content loading
- Backend API with database integration
- Database schema with sample data and migrations
- Development server with CORS and middleware
- GitHub Actions deployment pipeline
- Comprehensive documentation and setup guides
